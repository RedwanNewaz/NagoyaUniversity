#include <iostream>
#include <fstream>
#include<string>
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "geometry_msgs/PoseStamped.h"
#include <visualization_msgs/Marker.h>
#include "sensor_msgs/PointCloud2.h"

using namespace std;

ros::Publisher marker_pub;
vector<geometry_msgs::PoseStamped>posemap;
visualization_msgs::Marker line_list;
struct robotState{
  float x,y;
}robotstate;

void hector_slam_pose(const geometry_msgs::PoseStamped::ConstPtr& msg)
{
  ROS_INFO("I heard: [%d]", msg->header.seq);
  visualization_msgs::Marker robot;
  geometry_msgs::PoseStamped temp;
  temp.pose=msg->pose;
  posemap.push_back(temp);


     robot.header.frame_id = line_list.header.frame_id = "/velodyne";
     robot.header.stamp = line_list.header.stamp = ros::Time::now();

     line_list.ns = "trajectory";
     robot.ns = "robot";
     robot.action = line_list.action =visualization_msgs::Marker::ADD;



     robot.id = 0;
     line_list.id = 1;


     robot.type = visualization_msgs::Marker::ARROW;
     line_list.type =visualization_msgs::Marker::LINE_STRIP;

     robot.scale.x = 1.0;
     robot.scale.y = 2.0;
     robot.scale.z = 0.1;

     line_list.scale.x = 0.5;
     line_list.scale.y = 0.5;
     line_list.scale.z = 0.5;


     // robot are green
     robot.color.b = 1.0f;
     robot.color.a = 1.0;

     line_list.color.r =0.5;
     line_list.color.b =1.0;
     line_list.color.a = 1.0;

     geometry_msgs::Point p;

     float x=robot.pose.position.x =robotstate.x= p.x =msg->pose.position.x;
     float y=robot.pose.position.y =robotstate.y= p.y =msg->pose.position.y;
     robot.pose.position.z = p.z =msg->pose.position.z+1;


     robot.pose.orientation.x = msg->pose.orientation.x;
     robot.pose.orientation.y = msg->pose.orientation.y;
     robot.pose.orientation.z = msg->pose.orientation.z;
     robot.pose.orientation.w = msg->pose.orientation.w;

     robot.lifetime = ros::Duration();



     line_list.points.push_back(p);





     marker_pub.publish(robot);
     marker_pub.publish(line_list);
     //  convert back to sensor_msgs data

}

void save_slam_path(const std_msgs::String::ConstPtr& msg){

  ofstream myfile;
  string str = msg->data;
  char filename[10000];
  strcpy(filename, str.c_str());
  ROS_INFO("filename:=%s",filename);
  myfile.open (filename);

  //------pose saving
    for(int i=0;i<posemap.size();i++) {
      geometry_msgs::PoseStamped pose;
      pose = posemap.at(i);
      myfile<<pose.pose.position.x<<","<<pose.pose.position.y<<","
             <<pose.pose.orientation.x<<","<<pose.pose.orientation.y<<","
             <<pose.pose.orientation.z<<","<<pose.pose.orientation.w
           <<"\n";
    }
    myfile.close();

}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "state_estimator_node");
  ros::NodeHandle nh;
  robotstate.x=robotstate.y=0;
  ROS_WARN("state_estimator_node started");
  ros::Subscriber sub = nh.subscribe("/slam_out_pose", 1000, hector_slam_pose);
  marker_pub = nh.advertise<visualization_msgs::Marker>("robot_trajectory", 10);
  ros::Subscriber sub2 = nh.subscribe("/save_slam_path", 10, save_slam_path);
  ros::spin();

  return 0;
}
